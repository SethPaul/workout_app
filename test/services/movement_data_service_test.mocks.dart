// Mocks generated by Mockito 5.4.6 from annotations
// in workout_app/test/services/movement_data_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:workout_app/data/models/movement.dart' as _i4;
import 'package:workout_app/data/repositories/movement_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MovementRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovementRepository extends _i1.Mock
    implements _i2.MovementRepository {
  MockMovementRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Movement>> getAllMovements() => (super.noSuchMethod(
        Invocation.method(
          #getAllMovements,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Movement>>.value(<_i4.Movement>[]),
      ) as _i3.Future<List<_i4.Movement>>);

  @override
  _i3.Future<_i4.Movement?> getMovementById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getMovementById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Movement?>.value(),
      ) as _i3.Future<_i4.Movement?>);

  @override
  _i3.Future<List<_i4.Movement>> getMovementsByCategory(
          _i4.MovementCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovementsByCategory,
          [category],
        ),
        returnValue: _i3.Future<List<_i4.Movement>>.value(<_i4.Movement>[]),
      ) as _i3.Future<List<_i4.Movement>>);

  @override
  _i3.Future<List<_i4.Movement>> getMovementsByEquipment(
          _i4.EquipmentType? equipment) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovementsByEquipment,
          [equipment],
        ),
        returnValue: _i3.Future<List<_i4.Movement>>.value(<_i4.Movement>[]),
      ) as _i3.Future<List<_i4.Movement>>);

  @override
  _i3.Future<List<_i4.Movement>> getMovementsByDifficulty(
          _i4.DifficultyLevel? difficulty) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovementsByDifficulty,
          [difficulty],
        ),
        returnValue: _i3.Future<List<_i4.Movement>>.value(<_i4.Movement>[]),
      ) as _i3.Future<List<_i4.Movement>>);

  @override
  _i3.Future<List<_i4.Movement>> getMainMovements() => (super.noSuchMethod(
        Invocation.method(
          #getMainMovements,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Movement>>.value(<_i4.Movement>[]),
      ) as _i3.Future<List<_i4.Movement>>);

  @override
  _i3.Future<String> createMovement(_i4.Movement? movement) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMovement,
          [movement],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #createMovement,
            [movement],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> updateMovement(_i4.Movement? movement) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMovement,
          [movement],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMovement(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMovement,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
