// Mocks generated by Mockito 5.4.6 from annotations
// in workout_app/test/services/workout_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:sqflite/sqflite.dart' as _i3;
import 'package:workout_app/data/database/database_helper.dart' as _i10;
import 'package:workout_app/data/models/movement.dart' as _i9;
import 'package:workout_app/data/models/workout.dart' as _i2;
import 'package:workout_app/data/models/workout_template.dart' as _i8;
import 'package:workout_app/data/repositories/workout_repository.dart' as _i4;
import 'package:workout_app/services/workout_template_service.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWorkout_0 extends _i1.SmartFake implements _i2.Workout {
  _FakeWorkout_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WorkoutRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutRepository extends _i1.Mock implements _i4.WorkoutRepository {
  MockWorkoutRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Workout>> getAllWorkouts() =>
      (super.noSuchMethod(
            Invocation.method(#getAllWorkouts, []),
            returnValue: _i5.Future<List<_i2.Workout>>.value(<_i2.Workout>[]),
          )
          as _i5.Future<List<_i2.Workout>>);

  @override
  _i5.Future<_i2.Workout?> getWorkoutById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getWorkoutById, [id]),
            returnValue: _i5.Future<_i2.Workout?>.value(),
          )
          as _i5.Future<_i2.Workout?>);

  @override
  _i5.Future<List<_i2.Workout>> getWorkoutsByFormat(
    _i2.WorkoutFormat? format,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWorkoutsByFormat, [format]),
            returnValue: _i5.Future<List<_i2.Workout>>.value(<_i2.Workout>[]),
          )
          as _i5.Future<List<_i2.Workout>>);

  @override
  _i5.Future<List<_i2.Workout>> getWorkoutsByIntensity(
    _i2.IntensityLevel? intensity,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWorkoutsByIntensity, [intensity]),
            returnValue: _i5.Future<List<_i2.Workout>>.value(<_i2.Workout>[]),
          )
          as _i5.Future<List<_i2.Workout>>);

  @override
  _i5.Future<String> createWorkout(_i2.Workout? workout) =>
      (super.noSuchMethod(
            Invocation.method(#createWorkout, [workout]),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#createWorkout, [workout]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<void> updateWorkout(_i2.Workout? workout) =>
      (super.noSuchMethod(
            Invocation.method(#updateWorkout, [workout]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteWorkout(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWorkout, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> markWorkoutAsCompleted(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#markWorkoutAsCompleted, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [WorkoutTemplateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutTemplateService extends _i1.Mock
    implements _i7.WorkoutTemplateService {
  MockWorkoutTemplateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.WorkoutTemplate>> getAllTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTemplates, []),
            returnValue: _i5.Future<List<_i8.WorkoutTemplate>>.value(
              <_i8.WorkoutTemplate>[],
            ),
          )
          as _i5.Future<List<_i8.WorkoutTemplate>>);

  @override
  _i5.Future<_i8.WorkoutTemplate?> getTemplateById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTemplateById, [id]),
            returnValue: _i5.Future<_i8.WorkoutTemplate?>.value(),
          )
          as _i5.Future<_i8.WorkoutTemplate?>);

  @override
  _i5.Future<List<_i8.WorkoutTemplate>> getTemplatesByFormat(
    _i2.WorkoutFormat? format,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTemplatesByFormat, [format]),
            returnValue: _i5.Future<List<_i8.WorkoutTemplate>>.value(
              <_i8.WorkoutTemplate>[],
            ),
          )
          as _i5.Future<List<_i8.WorkoutTemplate>>);

  @override
  _i5.Future<List<_i8.WorkoutTemplate>> getTemplatesByIntensity(
    _i2.IntensityLevel? intensity,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTemplatesByIntensity, [intensity]),
            returnValue: _i5.Future<List<_i8.WorkoutTemplate>>.value(
              <_i8.WorkoutTemplate>[],
            ),
          )
          as _i5.Future<List<_i8.WorkoutTemplate>>);

  @override
  _i5.Future<List<_i8.WorkoutTemplate>> getTemplatesByEquipment(
    List<_i9.EquipmentType>? equipment,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTemplatesByEquipment, [equipment]),
            returnValue: _i5.Future<List<_i8.WorkoutTemplate>>.value(
              <_i8.WorkoutTemplate>[],
            ),
          )
          as _i5.Future<List<_i8.WorkoutTemplate>>);

  @override
  _i5.Future<List<_i8.WorkoutTemplate>> getTemplatesByCategory(
    List<_i9.MovementCategory>? categories,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTemplatesByCategory, [categories]),
            returnValue: _i5.Future<List<_i8.WorkoutTemplate>>.value(
              <_i8.WorkoutTemplate>[],
            ),
          )
          as _i5.Future<List<_i8.WorkoutTemplate>>);

  @override
  _i5.Future<String> createTemplate({
    required String? name,
    required String? description,
    required _i2.WorkoutFormat? format,
    required _i2.IntensityLevel? intensity,
    required int? targetDuration,
    List<_i9.MovementCategory>? preferredCategories,
    List<_i9.EquipmentType>? availableEquipment,
    bool? isMainMovementOnly,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createTemplate, [], {
              #name: name,
              #description: description,
              #format: format,
              #intensity: intensity,
              #targetDuration: targetDuration,
              #preferredCategories: preferredCategories,
              #availableEquipment: availableEquipment,
              #isMainMovementOnly: isMainMovementOnly,
              #metadata: metadata,
            }),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#createTemplate, [], {
                  #name: name,
                  #description: description,
                  #format: format,
                  #intensity: intensity,
                  #targetDuration: targetDuration,
                  #preferredCategories: preferredCategories,
                  #availableEquipment: availableEquipment,
                  #isMainMovementOnly: isMainMovementOnly,
                  #metadata: metadata,
                }),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<void> updateTemplate(_i8.WorkoutTemplate? template) =>
      (super.noSuchMethod(
            Invocation.method(#updateTemplate, [template]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteTemplate(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTemplate, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.Workout> generateWorkoutFromTemplate(String? templateId) =>
      (super.noSuchMethod(
            Invocation.method(#generateWorkoutFromTemplate, [templateId]),
            returnValue: _i5.Future<_i2.Workout>.value(
              _FakeWorkout_0(
                this,
                Invocation.method(#generateWorkoutFromTemplate, [templateId]),
              ),
            ),
          )
          as _i5.Future<_i2.Workout>);

  @override
  _i5.Future<_i2.Workout> generateWorkoutFromTemplateWithModifications(
    String? templateId, {
    _i2.WorkoutFormat? format,
    _i2.IntensityLevel? intensity,
    int? targetDuration,
    List<_i9.MovementCategory>? preferredCategories,
    List<_i9.EquipmentType>? availableEquipment,
    bool? isMainMovementOnly,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateWorkoutFromTemplateWithModifications,
              [templateId],
              {
                #format: format,
                #intensity: intensity,
                #targetDuration: targetDuration,
                #preferredCategories: preferredCategories,
                #availableEquipment: availableEquipment,
                #isMainMovementOnly: isMainMovementOnly,
              },
            ),
            returnValue: _i5.Future<_i2.Workout>.value(
              _FakeWorkout_0(
                this,
                Invocation.method(
                  #generateWorkoutFromTemplateWithModifications,
                  [templateId],
                  {
                    #format: format,
                    #intensity: intensity,
                    #targetDuration: targetDuration,
                    #preferredCategories: preferredCategories,
                    #availableEquipment: availableEquipment,
                    #isMainMovementOnly: isMainMovementOnly,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i2.Workout>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i10.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i5.Future<_i3.Database>.value(
              _FakeDatabase_1(this, Invocation.getter(#database)),
            ),
          )
          as _i5.Future<_i3.Database>);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
