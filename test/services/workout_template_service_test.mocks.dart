// Mocks generated by Mockito 5.4.6 from annotations
// in workout_app/test/services/workout_template_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:workout_app/data/models/movement.dart' as _i6;
import 'package:workout_app/data/models/workout.dart' as _i2;
import 'package:workout_app/data/models/workout_template.dart' as _i5;
import 'package:workout_app/data/repositories/workout_template_repository.dart'
    as _i3;
import 'package:workout_app/services/workout_generator.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWorkout_0 extends _i1.SmartFake implements _i2.Workout {
  _FakeWorkout_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WorkoutTemplateRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutTemplateRepository extends _i1.Mock
    implements _i3.WorkoutTemplateRepository {
  MockWorkoutTemplateRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.WorkoutTemplate>> getAllTemplates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTemplates,
          [],
        ),
        returnValue: _i4.Future<List<_i5.WorkoutTemplate>>.value(
            <_i5.WorkoutTemplate>[]),
      ) as _i4.Future<List<_i5.WorkoutTemplate>>);

  @override
  _i4.Future<_i5.WorkoutTemplate?> getTemplateById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTemplateById,
          [id],
        ),
        returnValue: _i4.Future<_i5.WorkoutTemplate?>.value(),
      ) as _i4.Future<_i5.WorkoutTemplate?>);

  @override
  _i4.Future<List<_i5.WorkoutTemplate>> getTemplatesByFormat(
          _i2.WorkoutFormat? format) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTemplatesByFormat,
          [format],
        ),
        returnValue: _i4.Future<List<_i5.WorkoutTemplate>>.value(
            <_i5.WorkoutTemplate>[]),
      ) as _i4.Future<List<_i5.WorkoutTemplate>>);

  @override
  _i4.Future<List<_i5.WorkoutTemplate>> getTemplatesByIntensity(
          _i2.IntensityLevel? intensity) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTemplatesByIntensity,
          [intensity],
        ),
        returnValue: _i4.Future<List<_i5.WorkoutTemplate>>.value(
            <_i5.WorkoutTemplate>[]),
      ) as _i4.Future<List<_i5.WorkoutTemplate>>);

  @override
  _i4.Future<List<_i5.WorkoutTemplate>> getTemplatesByEquipment(
          List<_i6.EquipmentType>? equipment) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTemplatesByEquipment,
          [equipment],
        ),
        returnValue: _i4.Future<List<_i5.WorkoutTemplate>>.value(
            <_i5.WorkoutTemplate>[]),
      ) as _i4.Future<List<_i5.WorkoutTemplate>>);

  @override
  _i4.Future<List<_i5.WorkoutTemplate>> getTemplatesByCategories(
          List<_i6.MovementCategory>? categories) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTemplatesByCategories,
          [categories],
        ),
        returnValue: _i4.Future<List<_i5.WorkoutTemplate>>.value(
            <_i5.WorkoutTemplate>[]),
      ) as _i4.Future<List<_i5.WorkoutTemplate>>);

  @override
  _i4.Future<String> createTemplate(_i5.WorkoutTemplate? template) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTemplate,
          [template],
        ),
        returnValue: _i4.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #createTemplate,
            [template],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> updateTemplate(_i5.WorkoutTemplate? template) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTemplate,
          [template],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTemplate(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTemplate,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> incrementUsage(String? id) => (super.noSuchMethod(
        Invocation.method(
          #incrementUsage,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WorkoutGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutGenerator extends _i1.Mock implements _i8.WorkoutGenerator {
  MockWorkoutGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.Movement> get availableMovements => (super.noSuchMethod(
        Invocation.getter(#availableMovements),
        returnValue: <_i6.Movement>[],
      ) as List<_i6.Movement>);

  @override
  _i2.Workout generateWorkout({
    required _i2.WorkoutFormat? format,
    required _i2.IntensityLevel? intensity,
    required int? targetDuration,
    List<_i6.MovementCategory>? preferredCategories,
    List<_i6.EquipmentType>? availableEquipment,
    bool? isMainMovementOnly,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateWorkout,
          [],
          {
            #format: format,
            #intensity: intensity,
            #targetDuration: targetDuration,
            #preferredCategories: preferredCategories,
            #availableEquipment: availableEquipment,
            #isMainMovementOnly: isMainMovementOnly,
          },
        ),
        returnValue: _FakeWorkout_0(
          this,
          Invocation.method(
            #generateWorkout,
            [],
            {
              #format: format,
              #intensity: intensity,
              #targetDuration: targetDuration,
              #preferredCategories: preferredCategories,
              #availableEquipment: availableEquipment,
              #isMainMovementOnly: isMainMovementOnly,
            },
          ),
        ),
      ) as _i2.Workout);
}
