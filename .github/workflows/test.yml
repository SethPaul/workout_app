name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FLUTTER_VERSION: '3.24.3'

jobs:
  analyze:
    name: Analyze & Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Disable Flutter analytics
      run: flutter config --no-analytics
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Analyze project source
      run: flutter analyze --fatal-infos

  test:
    name: Unit & Widget Tests
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Disable Flutter analytics
      run: flutter config --no-analytics
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run tests with coverage
      run: flutter test --coverage --reporter expanded
    
    - name: Check coverage file exists
      run: |
        if [ -f coverage/lcov.info ]; then
          echo "Coverage file found"
          ls -la coverage/
        else
          echo "No coverage file generated"
          exit 1
        fi
    
    - name: Install coverage tools
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
    
    - name: Generate coverage report
      run: |
        lcov --remove coverage/lcov.info \
          '**/*.g.dart' \
          '**/*.freezed.dart' \
          '**/*.mocks.dart' \
          '**/generated/**' \
          'test/**' \
          'integration_test/**' \
          -o coverage/lcov_cleaned.info
        genhtml coverage/lcov_cleaned.info -o coverage/html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: coverage/lcov_cleaned.info
        fail_ci_if_error: false
        verbose: true
    
    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test_reports/
        if-no-files-found: warn

  golden-tests:
    name: Golden Tests (UI)
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Disable Flutter analytics
      run: flutter config --no-analytics
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run golden tests
      run: flutter test test/golden/ --reporter expanded
      continue-on-error: true
    
    - name: Archive golden test failures
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: golden-failures
        path: test/golden/failures/
        if-no-files-found: ignore

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: [test, golden-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Disable Flutter analytics
      run: flutter config --no-analytics
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Build APK (Debug)
      run: flutter build apk --debug --verbose
    
    - name: Build APK (Release)
      run: flutter build apk --release --verbose
    
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: build/app/outputs/flutter-apk/app-debug.apk
    
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: build/app/outputs/flutter-apk/app-release.apk

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-android
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Disable Flutter analytics
      run: flutter config --no-analytics
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-api-30-${{ env.FLUTTER_VERSION }}
    
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        script: echo "Generated AVD snapshot for caching."
    
    - name: Run integration tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        script: flutter test integration_test/
      continue-on-error: true

  # Summary job that checks if all critical tests passed
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [analyze, test, build-android]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Analyze job: ${{ needs.analyze.result }}"
        echo "Test job: ${{ needs.test.result }}"
        echo "Build job: ${{ needs.build-android.result }}"
        
        if [[ "${{ needs.analyze.result }}" == "failure" ]]; then
          echo "❌ Analysis failed - code formatting or static analysis issues"
          exit 1
        fi
        
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "❌ Tests failed - unit or widget test failures"
          exit 1
        fi
        
        if [[ "${{ needs.build-android.result }}" == "failure" ]]; then
          echo "❌ Build failed - compilation issues"
          exit 1
        fi
        
        echo "✅ All critical jobs passed successfully!"